---
import Layout from '../layouts/Layout.astro';
import CourseCard from '../components/CourseCard.astro';
import { courseData } from '../data/courses';

// Get unique categories
const categories = [...new Set(courseData.map(course => course.category))];
const levels = [...new Set(courseData.map(course => course.level))];

// Price ranges
const priceRanges = [
  { min: 0, max: 500000, label: "Under IDR 500K" },
  { min: 500000, max: 750000, label: "IDR 500K - 750K" },
  { min: 750000, max: 1000000, label: "IDR 750K - 1M" },
  { min: 1000000, max: Infinity, label: "Above IDR 1M" }
];
---

<Layout title="Course Categories - LearnCode">
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Browse Courses</h1>
    
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Filters Sidebar -->
      <div class="lg:col-span-1">
        <div class="bg-white p-6 rounded-lg shadow-sm">
          <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Categories</h3>
            <div class="space-y-2">
              {categories.map(category => (
                <label class="flex items-center">
                  <input type="checkbox" class="rounded border-gray-300 text-primary focus:ring-primary" />
                  <span class="ml-2 text-gray-600">{category}</span>
                </label>
              ))}
            </div>
          </div>

          <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Price Range</h3>
            <div class="space-y-2">
              {priceRanges.map(range => (
                <label class="flex items-center">
                  <input type="checkbox" class="rounded border-gray-300 text-primary focus:ring-primary" />
                  <span class="ml-2 text-gray-600">{range.label}</span>
                </label>
              ))}
            </div>
          </div>

          <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Level</h3>
            <div class="space-y-2">
              {levels.map(level => (
                <label class="flex items-center">
                  <input type="checkbox" class="rounded border-gray-300 text-primary focus:ring-primary" />
                  <span class="ml-2 text-gray-600">{level}</span>
                </label>
              ))}
            </div>
          </div>

          <button
            class="w-full bg-primary text-white py-2 px-4 rounded-lg font-medium text-center hover:bg-primary/90 transition-colors"
          >
            Apply Filters
          </button>
        </div>
      </div>

      <!-- Course Grid -->
      <div class="lg:col-span-3">
        <div class="mb-6 flex items-center justify-between">
          <p class="text-gray-600">{courseData.length} courses found</p>
          <select class="rounded-lg border-gray-300 text-gray-600 focus:ring-primary focus:border-primary">
            <option>Sort by: Featured</option>
            <option>Price: Low to High</option>
            <option>Price: High to Low</option>
            <option>Newest First</option>
          </select>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
          {courseData.map(course => (
            <CourseCard course={course} />
          ))}
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Client-side filtering logic can be added here
  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  const sortSelect = document.querySelector('select');

  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      // Add filtering logic
      console.log('Filter changed');
    });
  });

  sortSelect?.addEventListener('change', (e) => {
    // Add sorting logic
    console.log('Sort changed:', (e.target as HTMLSelectElement).value);
  });
</script>